generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model appointment {
  id         String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date       DateTime    @db.Date
  start_time DateTime    @db.Time(6)
  end_time   DateTime    @db.Time(6)
  duration   Int
  company_id String      @db.Uuid
  created_at DateTime    @default(now()) @db.Timestamp(6)
  updated_at DateTime    @default(now()) @db.Timestamp(6)
  company    company     @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  time_slot  time_slot[]
}

model calendar {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date       DateTime @db.Date
  company_id String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  company    company  @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model company {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?       @db.VarChar(255)
  name        String        @db.VarChar(255)
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  user_id     String        @db.Uuid
  tenant_id   String        @db.VarChar(255)
  appointment appointment[]
  calendar    calendar[]
  user        user          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model role {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String   @db.VarChar(255)
  user_id    String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model time_slot {
  id             String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  start_time     DateTime    @db.Time(6)
  end_time       DateTime    @db.Time(6)
  appointment_id String      @db.Uuid
  created_at     DateTime    @default(now()) @db.Timestamp(6)
  updated_at     DateTime    @default(now()) @db.Timestamp(6)
  appointment    appointment @relation(fields: [appointment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String    @unique @db.VarChar(255)
  firstName   String?   @db.VarChar(255)
  lastName    String?   @db.VarChar(255)
  roq_user_id String    @db.VarChar(255)
  tenant_id   String    @db.VarChar(255)
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  company     company[]
  role        role[]
}
